{
  "hash": "eb946b9b048fa8036cbd6d3381bc5858",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  revealjs:\n    width: 1600\n    height: 900   # 16:9\n    margin: 0.08  # (optional) Rand um den Slide-Inhalt\n    slide-number: c\n    css: styles.css\n---\n\n\n\n# reads - Storing Sequence Information {.smaller}\n\n------------------------------------------------------------------------\n\n## Sequence data format (fastq) {.smaller}\n\n:::::: columns\n:::: {.column width=\"65%\"}\n<br> <br>\n\n**Illumina sequencing:**\n\n-   Millions of sequences (= reads) are generated\\\n-   single-read sequencing = one file (R1)\\\n-   paired-read sequencing = two files (R1/R2)\n\n**MinION:**\n\n-   reads are not paired!\n-   But saved in the same way! <br> <br> <br> <br>\n\n::: {style=\"margin-left: 6em;\"}\nIdentifier (run, cluster, …)\\\nSequence (A, T, G, C)\\\n“+” separator\\\nQuality (ASCII)\n:::\n::::\n\n::: {.column width=\"35%\"}\n![](png/single_cluster_perspective.png){width=\"100%\" align=\"right\"} ![](png/one_read_short_grey.png){.absolute width=\"50%\" bottom=\"30\" right=\"300\"}\n:::\n::::::\n\n## For row format (fastq) {.smaller}\n\n<br> <br>\n\n| Row | Description |\n|--------------|---------------------------------------------------------|\n| **1st row** | Identifier (run, cluster, location on flow cell, read number, etc.) |\n| **2nd row** | Nucleotide sequence (A, T, G, C, N) |\n| **3rd row** | Separator line (optionally repeats carries an identifier) |\n| **4th row** | Quality scores for each base (ASCII-encoded Phred scores) |\n\n<br>\\\n<br>\n\n![](png/one_read_short_grey.png){.absolute bottom=\"100\" right=\"240\" width=\"70%\"}\n\n## Read format\n\\\nExample: NCBI SRA GenBank entry: SRR5560266 (single read data)\n\\\n\\\n![](png/one_read_long_grey.png)\n\n\n-   The first row provides information about the cluster, read position, location, run, ... <https://help.basespace.illumina.com/articles/descriptive/fastq-files/>\n-   Nucleotide sequence\n-   Spacer\n-   Base call quality for each nucleotide\n\n## Read format (paired reads)\n\n- Paired reads are saved in the same format as single read data\n- Usually paired reads are stored in two separate files, each file with the same number and order of reads\n- Paired reads have (almost) the same identifier\n\n![](png/paired_reads_grey.png){.absolute bottom=\"100\" right=\"0\" bottom=\"0\" width=\"70%\"}\n\n## Read quality\n\n![](png/one_read_long_grey.png){width=\"100%\"}\n\n- quality = probability that a base is detected falsely\n- each base gets its own quality score = Q score\n- **Q** = Phred quality score\n- **P** = base-calling error probability\n\n![](png/q_to_p_calculation.png){.absolute left=\"100\" bottom=\"150\" width=\"40%\"}\n\n  \n![](png/q_vs_p_plot.png){.absolute right=\"0\" bottom=\"0\" width=\"37%\"}\n\n\n## Code\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](02_lecture_read_information_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "02_lecture_read_information_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}